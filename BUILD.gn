 # 插件文件名
plugin_name = "cornerstone_sdk_demo.dll"

# 定义一个动态链接库目标
shared_library("../out/" + plugin_name)
{
    # 源文件列表
    sources = [
        # ==================分割线=====================
        # TODO: 如果插件项目加入了源文件，必须在此处声明
        # 头文件（*.h）无需添加
        # 错误示例："//src/*.cc"（不支持通配符）
        "//src/plugin.cc",
        # ==================分割线=====================
        # 以下是SDK所需文件，请勿随意更改
        "//src/sdk/sdk.cc",
        "//src/sdk/api/api.cc",
        "//src/sdk/encoding/encoding.cc",
    ]

    # 连接器参数（未格式化）
    ldflags_separate= [
        "-mi386pe",                 # 生成32位的动态链接库
        "-static",                  # 静态链接，不依赖GCC运行时库
        "--enable-stdcall-fixup",   # 允许.def配置导出
        "--gc-sections",            # 回收未使用的段，减小体积
    ]

    # 转化为真正的连接器参数格式："-xxx,-yyy,..."
    ldflags = [string_join(",", ldflags_separate)]

    # C/C++ 编译器参数
    cflags = [
        "-m32",                     # 生成32位的目标文件
        "-std=c++17",               # 启用C++17特性
        "-O999",                    # 超强优化（和-O3没区别）
        "-ffunction-sections",      # 将每个函数单独划分为代码段，方便回收
        "-fdata-sections",          # 将每段数据单独划分为数据段，方便回收
        # "-DDEBUG", "-O0", "-g",   # 调试模式，若要使用请去掉前面的超强优化
    ]

    # 输入的lib，支持各种MinGW能用的.a和.o
    libs=[
        def_file    # .def文件，在config/config.gn有写
    ]
}

# TODO: 可以在这里加上其他的生成配置，比如单元测试
